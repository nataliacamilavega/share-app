export type DraftSet<T> = ReturnType<typeof createDraftSet<T>>;
export type DraftRecord<T> = ReturnType<typeof createDraftRecord<T>>;
export type DraftValue = ReturnType<typeof createDraftValue>;
export declare function createDraftSet<T>(set: Set<T>): {
    startDraft(): Set<T> & {
        add(value?: T): Set<T> | undefined;
        didMutate(): boolean;
        finalise(): Set<T>;
    };
};
export declare function createDraftRecord<T>(record: T): {
    startDraft(): {
        set(path: string, value: any): void;
        didMutate(): boolean;
        finalise(): T;
    };
    get(): T;
};
export declare function createDraftValue(value: any): {
    startDraft(): {
        set(newValue: any): void;
        didMutate(): boolean;
        finalise(): any;
    };
};
