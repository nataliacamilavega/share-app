import { ComponentType } from "react";
import { VariableContextValue } from "./styles";
import { InteropComponentConfig, StyleDeclaration, StyleRule } from "../../types";
import { DraftRecord, DraftSetFactory, DraftValue } from "./immutability";
import { Effect } from "../observable";
export type NewReducerState = {
    baseComponent: ComponentType<any>;
    component: ComponentType<any>;
    animated: number;
    variables: number;
    containers: number;
    pressable: number;
    refs: {
        originalProps: Record<string, any>;
    };
    subStates: ReducerSubState[];
};
type ReducerSubState = {
    props?: DraftRecord<Record<string, any>>;
    variables?: DraftRecord<VariableContextValue>;
    containerNames?: DraftValue;
    className: string;
    normal: DraftSetFactory<StyleDeclaration | Record<string, any>>;
    important: DraftSetFactory<StyleRule>;
    declarationsEffect: Effect;
    styleEffect: Effect;
};
type ReducerInitOptions = {
    component: ComponentType<any>;
    configs: InteropComponentConfig[];
    props: Record<string, any>;
    dispatch: (action: NewReducerAction) => void;
};
export type NewReducerAction = {
    type: "declarations";
    index: number;
    className?: string;
} | {
    type: "styles";
    index: number;
};
export declare function reducer(state: NewReducerState, action: NewReducerAction): NewReducerState | undefined;
export declare function initReducer(options: ReducerInitOptions): NewReducerState;
export {};
