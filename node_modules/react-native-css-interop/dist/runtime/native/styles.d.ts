import { Effect, Observable } from "../observable";
import { cssVariableObservable } from "./appearance-observables";
import type { ExtractedAnimation, RemappedClassName, StyleRuleSet, StyleSheetRegisterCompiledOptions } from "../../types";
export type InjectedStyleContextValue = {
    styles: Record<string, Observable<StyleRuleSet>>;
    animations: Record<string, ExtractedAnimation>;
    universalVariables: VariableContextValue;
};
export type VariableContextValue = Map<string, ReturnType<typeof cssVariableObservable>> | Record<string, ReturnType<typeof cssVariableObservable>>;
declare global {
    var __css_interop: {
        styles: Map<string, Observable<StyleRuleSet | void>>;
        keyframes: Map<string, Observable<ExtractedAnimation | void>>;
        rootVariables: Map<string, ReturnType<typeof cssVariableObservable>>;
        universalVariables: Map<string, ReturnType<typeof cssVariableObservable>>;
    };
}
export declare const opaqueStyles: WeakMap<object, StyleRuleSet | RemappedClassName>;
export declare const VariableContext: import("react").Context<VariableContextValue>;
export declare function getStyle(name: string, effect?: Effect): void | StyleRuleSet;
export declare function getOpaqueStyles(style: Record<string, any>, effect?: Effect): (StyleRuleSet | Record<string, any> | void)[];
export declare function getAnimation(name: string, effect: Effect): void | ExtractedAnimation;
export declare function getVariable(name: string, store?: Record<string, any> | Map<string, any>, effect?: Effect): any;
export declare const getUniversalVariable: (name: string, effect: Effect) => any;
export declare function resetData(): void;
export declare function injectData(data: StyleSheetRegisterCompiledOptions): void;
