import type { AnimatableValue } from "react-native-reanimated";
import type { EasingFunction, Time } from "lightningcss";
import type { RuntimeValueDescriptor, RuntimeValueFrame } from "../../types";
import { Effect } from "../observable";
import { ReducerState, ReducerTracking, Refs } from "./types";
export declare function resolveValue(state: ReducerState, refs: Refs, tracking: ReducerTracking, descriptor: RuntimeValueDescriptor | string | number | boolean, style?: Record<string, any>): any;
export declare function resolveAnimation(state: ReducerState, refs: Refs, [initialFrame, ...frames]: RuntimeValueFrame[], property: string, delay: number, totalDuration: number, easingFuncs: EasingFunction | EasingFunction[]): [AnimatableValue, AnimatableValue, ...AnimatableValue[]];
export declare function resolveTransitionValue(state: ReducerState, property: string): {
    defaultValue: AnimatableValue;
    value: any;
};
export declare const timeToMS: (time: Time) => number;
export declare function getEasing(timingFunction: EasingFunction, Easing: (typeof import("react-native-reanimated"))["Easing"]): ((t: number) => number) | {
    factory: () => (x: number) => number;
};
export declare function setDeep(target: Record<string, any>, paths: string[], value: any): void;
export declare function getWidth(state: ReducerState, refs: Refs, tracking: ReducerTracking): number;
export declare function getHeight(state: ReducerState, refs: Refs, tracking: ReducerTracking): number;
export declare const defaultValues: Record<string, AnimatableValue | ((effect: Effect) => AnimatableValue)>;
export declare function calc(state: ReducerState, refs: Refs, tracking: ReducerTracking, expression: RuntimeValueDescriptor, style?: Record<string, any>): {
    mode: string;
    raw: number;
    value: string | number;
} | undefined;
