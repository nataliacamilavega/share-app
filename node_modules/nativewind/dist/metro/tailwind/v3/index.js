"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tailwindCliV3 = tailwindCliV3;
exports.tailwindConfigV3 = tailwindConfigV3;
const child_process_1 = require("child_process");
const child_file = __dirname + "/child.js";
function tailwindCliV3(options) {
    return new Promise((resolve, reject) => {
        try {
            const env = {
                ...process.env,
                NATIVEWIND_INPUT: options.input,
                NATIVEWIND_WATCH: `${options.dev}`,
                NATIVEWIND_OS: options.platform,
                BROWSERSLIST: options.browserslist ?? undefined,
                BROWSERSLIST_ENV: options.browserslistEnv ?? undefined,
            };
            const child = (0, child_process_1.fork)(child_file, { stdio: "pipe", env });
            let initialMessage = true;
            let initialDoneIn = true;
            child.stderr?.on("data", (data) => {
                data = data.toString();
                if (data.includes("Done in")) {
                    if (initialDoneIn) {
                        initialDoneIn = false;
                    }
                    else {
                    }
                    return;
                }
                else if (data.includes("warn -")) {
                    console.warn(data);
                }
            });
            child.stdout?.on("data", (data) => {
                data = data.toString();
            });
            child.on("message", (message) => {
                if (initialMessage) {
                    resolve(message.toString());
                    initialMessage = false;
                }
                else {
                    options.onChange(message.toString());
                }
            });
        }
        catch (e) {
            reject(e);
        }
    });
}
function tailwindConfigV3(path) {
    const config = require("tailwindcss/loadConfig")(path);
    const hasPreset = config.presets?.some((preset) => {
        return preset.nativewind;
    });
    if (!hasPreset) {
        throw new Error("Tailwind CSS has not been configured with the NativeWind preset");
    }
    return config;
}
//# sourceMappingURL=index.js.map